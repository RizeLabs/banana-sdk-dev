/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  FallbackManagerErrors,
  FallbackManagerErrorsInterface,
} from "../FallbackManagerErrors";

const _abi = [
  {
    inputs: [],
    name: "HandlerCannotBeZero",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea2646970667358221220fe45f579efcb85bb1c9546cb3f638dda4c3052a9402e04ae4d4583e5e287b16664736f6c63430008110033";

type FallbackManagerErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FallbackManagerErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FallbackManagerErrors__factory extends ContractFactory {
  constructor(...args: FallbackManagerErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FallbackManagerErrors> {
    return super.deploy(overrides || {}) as Promise<FallbackManagerErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FallbackManagerErrors {
    return super.attach(address) as FallbackManagerErrors;
  }
  override connect(signer: Signer): FallbackManagerErrors__factory {
    return super.connect(signer) as FallbackManagerErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FallbackManagerErrorsInterface {
    return new utils.Interface(_abi) as FallbackManagerErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FallbackManagerErrors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FallbackManagerErrors;
  }
}
