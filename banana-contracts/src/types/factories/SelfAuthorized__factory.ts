/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SelfAuthorized,
  SelfAuthorizedInterface,
} from "../SelfAuthorized";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CallerIsNotSelf",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea2646970667358221220ff8f364cbd610a6ebd02e6d4e9213745c3a35672d503cce10ae478d87a31c03f64736f6c63430008110033";

type SelfAuthorizedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SelfAuthorizedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SelfAuthorized__factory extends ContractFactory {
  constructor(...args: SelfAuthorizedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SelfAuthorized> {
    return super.deploy(overrides || {}) as Promise<SelfAuthorized>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SelfAuthorized {
    return super.attach(address) as SelfAuthorized;
  }
  override connect(signer: Signer): SelfAuthorized__factory {
    return super.connect(signer) as SelfAuthorized__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SelfAuthorizedInterface {
    return new utils.Interface(_abi) as SelfAuthorizedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SelfAuthorized {
    return new Contract(address, _abi, signerOrProvider) as SelfAuthorized;
  }
}
