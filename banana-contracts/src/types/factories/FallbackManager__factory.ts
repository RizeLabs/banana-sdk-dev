/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  FallbackManager,
  FallbackManagerInterface,
} from "../FallbackManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CallerIsNotSelf",
    type: "error",
  },
  {
    inputs: [],
    name: "HandlerCannotBeZero",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousHandler",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "handler",
        type: "address",
      },
    ],
    name: "ChangedFallbackHandler",
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getFallbackHandler",
    outputs: [
      {
        internalType: "address",
        name: "_handler",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "handler",
        type: "address",
      },
    ],
    name: "setFallbackHandler",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761024a908161001c8239f35b600080fdfe60806040526004361015610022575b3461001d5761001b6101c2565b005b600080fd5b6000803560e01c8063856dfd99146101525763f08a032314610044575061000e565b3461014f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014f5760043573ffffffffffffffffffffffffffffffffffffffff8082169182810361014b5730330361011b577f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d49081549184156100f15755167f06be9a1bea257286cf2afa8205ed494ca9d6a4b41aa58d04238deebada20fb0c8380a380f35b60046040517fdd449f5f000000000000000000000000000000000000000000000000000000008152fd5b60246040517f051e38cc000000000000000000000000000000000000000000000000000000008152336004820152fd5b8380fd5b80fd5b503461014f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014f5773ffffffffffffffffffffffffffffffffffffffff7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d4541660805260206080f35b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d454801561001b576000808092368280373360601b3652818060143601925af13d82803e15610210573d90f35b3d90fdfea264697066735822122052dd11f323ae6b71501aa692b04f8d5eb547b0d92362ccdc08faece6dca780bf64736f6c63430008110033";

type FallbackManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FallbackManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FallbackManager__factory extends ContractFactory {
  constructor(...args: FallbackManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FallbackManager> {
    return super.deploy(overrides || {}) as Promise<FallbackManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FallbackManager {
    return super.attach(address) as FallbackManager;
  }
  override connect(signer: Signer): FallbackManager__factory {
    return super.connect(signer) as FallbackManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FallbackManagerInterface {
    return new utils.Interface(_abi) as FallbackManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FallbackManager {
    return new Contract(address, _abi, signerOrProvider) as FallbackManager;
  }
}
