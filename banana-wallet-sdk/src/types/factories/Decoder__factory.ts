/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Decoder, DecoderInterface } from "../Decoder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "decode",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576102b8908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c63785fb4111461002a57600080fd5b346101ce57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ce576004359173ffffffffffffffffffffffffffffffffffffffff831683036101d2576024359267ffffffffffffffff84116101ce57366023850112156101ce578360040135936100ae6100a986610248565b6101d5565b8581526020958682019236602483830101116101ca57859492858984829795602484960187378301015251925af1903d156101c2573d916100f16100a984610248565b9283523d828685013e5b61016557929082519382859384528251928382860152825b84811061014f57505050828201840152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190f35b8181018301518882018801528795508201610113565b6064848451907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600b60248201527f43616c6c206661696c65640000000000000000000000000000000000000000006044820152fd5b6060916100fb565b8580fd5b5080fd5b80fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761021957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161021957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0166020019056fea2646970667358221220cb16e881da681f5b0e0906ea738c050585356df972779304418db9dc394ec99e64736f6c63430008110033";

type DecoderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DecoderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Decoder__factory extends ContractFactory {
  constructor(...args: DecoderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Decoder> {
    return super.deploy(overrides || {}) as Promise<Decoder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Decoder {
    return super.attach(address) as Decoder;
  }
  override connect(signer: Signer): Decoder__factory {
    return super.connect(signer) as Decoder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DecoderInterface {
    return new utils.Interface(_abi) as DecoderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Decoder {
    return new Contract(address, _abi, signerOrProvider) as Decoder;
  }
}
