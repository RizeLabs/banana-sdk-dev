/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SelfAuthorizedErrors,
  SelfAuthorizedErrorsInterface,
} from "../SelfAuthorizedErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CallerIsNotSelf",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea26469706673582212201320bb6984936209cb8a7221197439a0dcfbe70b4575a1405bba33081b2bf6b664736f6c63430008110033";

type SelfAuthorizedErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SelfAuthorizedErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SelfAuthorizedErrors__factory extends ContractFactory {
  constructor(...args: SelfAuthorizedErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SelfAuthorizedErrors> {
    return super.deploy(overrides || {}) as Promise<SelfAuthorizedErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SelfAuthorizedErrors {
    return super.attach(address) as SelfAuthorizedErrors;
  }
  override connect(signer: Signer): SelfAuthorizedErrors__factory {
    return super.connect(signer) as SelfAuthorizedErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SelfAuthorizedErrorsInterface {
    return new utils.Interface(_abi) as SelfAuthorizedErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SelfAuthorizedErrors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SelfAuthorizedErrors;
  }
}
