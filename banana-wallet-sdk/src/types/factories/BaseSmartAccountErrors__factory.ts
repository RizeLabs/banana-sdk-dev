/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BaseSmartAccountErrors,
  BaseSmartAccountErrorsInterface,
} from "../BaseSmartAccountErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CallerIsNotAnEntryPoint",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea26469706673582212205d4a7eec6f6fcbd7cf1fea92430ab449b8f10868d7bedce6ad0f71ace27f020864736f6c63430008110033";

type BaseSmartAccountErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseSmartAccountErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseSmartAccountErrors__factory extends ContractFactory {
  constructor(...args: BaseSmartAccountErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseSmartAccountErrors> {
    return super.deploy(overrides || {}) as Promise<BaseSmartAccountErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BaseSmartAccountErrors {
    return super.attach(address) as BaseSmartAccountErrors;
  }
  override connect(signer: Signer): BaseSmartAccountErrors__factory {
    return super.connect(signer) as BaseSmartAccountErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseSmartAccountErrorsInterface {
    return new utils.Interface(_abi) as BaseSmartAccountErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseSmartAccountErrors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BaseSmartAccountErrors;
  }
}
