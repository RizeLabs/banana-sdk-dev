/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { GasEstimator, GasEstimatorInterface } from "../GasEstimator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "estimate",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610277908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600090813560e01c630eb34cd31461002e57600080fd5b3461023d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261023d5783359173ffffffffffffffffffffffffffffffffffffffff8316830361023a57602480359367ffffffffffffffff9586861161023657366023870112156102365785880135878111610232573684828901011161023257918185809493848295885a9c018337810182815203925af1953d15610229573d8681116101fe578451967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8501160116880190888210908211176101d357855286523d83602088013e5b5a85039485116101a95750509391908051948593151584526020606081860152855195866060870152825b87811061019257505050937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f9260809687848801015285015201168101030190f35b81810183015189820160800152889650820161014d565b601183917f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b83856041857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50604183917f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60609550610122565b8480fd5b8380fd5b80fd5b5080fdfea264697066735822122005c8f1c8190171159c21956c74fd3809fc96bb619745cba6def58f933caa1bc964736f6c63430008110033";

type GasEstimatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasEstimatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasEstimator__factory extends ContractFactory {
  constructor(...args: GasEstimatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GasEstimator> {
    return super.deploy(overrides || {}) as Promise<GasEstimator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GasEstimator {
    return super.attach(address) as GasEstimator;
  }
  override connect(signer: Signer): GasEstimator__factory {
    return super.connect(signer) as GasEstimator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasEstimatorInterface {
    return new utils.Interface(_abi) as GasEstimatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasEstimator {
    return new Contract(address, _abi, signerOrProvider) as GasEstimator;
  }
}
