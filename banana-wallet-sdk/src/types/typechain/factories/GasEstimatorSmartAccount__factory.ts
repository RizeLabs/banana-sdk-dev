/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GasEstimatorSmartAccount,
  GasEstimatorSmartAccountInterface,
} from "../GasEstimatorSmartAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_actualWallet",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_moduleSetupContract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_moduleSetupData",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "estimate",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103a8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c99469fa14610030575b600080fd5b61004361003e3660046101be565b61005b565b6040516100529392919061026f565b60405180910390f35b600060606000805a905060008b6001600160a01b031663df20ffbc8c8c8c8c6040518563ffffffff1660e01b815260040161009994939291906102ce565b6020604051808303816000875af11580156100b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dc9190610317565b90508c6001600160a01b031687876040516100f892919061033b565b6000604051808303816000865af19150503d8060008114610135576040519150601f19603f3d011682016040523d82523d6000602084013e61013a565b606091505b5090955093505a61014b908361034b565b92505050985098509895505050505050565b6001600160a01b038116811461017257600080fd5b50565b60008083601f84011261018757600080fd5b50813567ffffffffffffffff81111561019f57600080fd5b6020830191508360208285010111156101b757600080fd5b9250929050565b60008060008060008060008060c0898b0312156101da57600080fd5b88356101e58161015d565b975060208901356101f58161015d565b965060408901356102058161015d565b9550606089013567ffffffffffffffff8082111561022257600080fd5b61022e8c838d01610175565b909750955060808b0135945060a08b013591508082111561024e57600080fd5b5061025b8b828c01610175565b999c989b5096995094979396929594505050565b831515815260006020606081840152845180606085015260005b818110156102a557868101830151858201608001528201610289565b506000608082860101526080601f19601f83011685010192505050826040830152949350505050565b6001600160a01b0385168152606060208201528260608201528284608083013760006080848301015260006080601f19601f860116830101905082604083015295945050505050565b60006020828403121561032957600080fd5b81516103348161015d565b9392505050565b8183823760009101908152919050565b8181038181111561036c57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220ee200f8bd9e7f69b48511ee3882a6768bb594a5e46e386e48563812f35b2c82064736f6c63430008110033";

export class GasEstimatorSmartAccount__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GasEstimatorSmartAccount> {
    return super.deploy(overrides || {}) as Promise<GasEstimatorSmartAccount>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GasEstimatorSmartAccount {
    return super.attach(address) as GasEstimatorSmartAccount;
  }
  connect(signer: Signer): GasEstimatorSmartAccount__factory {
    return super.connect(signer) as GasEstimatorSmartAccount__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasEstimatorSmartAccountInterface {
    return new utils.Interface(_abi) as GasEstimatorSmartAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasEstimatorSmartAccount {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GasEstimatorSmartAccount;
  }
}
