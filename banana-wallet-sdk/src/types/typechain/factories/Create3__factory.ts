/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Create3, Create3Interface } from "../Create3";

const _abi = [
  {
    inputs: [],
    name: "ErrorCreatingContract",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorCreatingProxy",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetAlreadyExists",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220138ad1e63daff8a5bc656c80356883257fd91d288bd543841612496c264bb42664736f6c63430008110033";

export class Create3__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Create3> {
    return super.deploy(overrides || {}) as Promise<Create3>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Create3 {
    return super.attach(address) as Create3;
  }
  connect(signer: Signer): Create3__factory {
    return super.connect(signer) as Create3__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Create3Interface {
    return new utils.Interface(_abi) as Create3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Create3 {
    return new Contract(address, _abi, signerOrProvider) as Create3;
  }
}
