/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BananaVerificationModuleInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "initForSmartAccount(uint256[2])": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "isValidSignatureForAddress(bytes32,bytes,address)": FunctionFragment;
    "nn()": FunctionFragment;
    "pp()": FunctionFragment;
    "smartAccountOwners(address,uint256)": FunctionFragment;
    "toHex(bytes32)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initForSmartAccount",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignatureForAddress",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "nn", values?: undefined): string;
  encodeFunctionData(functionFragment: "pp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "smartAccountOwners",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "toHex", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initForSmartAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignatureForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "smartAccountOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toHex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;

  events: {};
}

export class BananaVerificationModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BananaVerificationModuleInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    initForSmartAccount(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isValidSignature(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isValidSignatureForAddress(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      smartAccount: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nn(overrides?: CallOverrides): Promise<[BigNumber]>;

    pp(overrides?: CallOverrides): Promise<[BigNumber]>;

    smartAccountOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toHex(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  initForSmartAccount(
    publicKey: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isValidSignature(
    ethSignedDataHash: BytesLike,
    moduleSignature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidSignatureForAddress(
    ethSignedDataHash: BytesLike,
    moduleSignature: BytesLike,
    smartAccount: string,
    overrides?: CallOverrides
  ): Promise<string>;

  nn(overrides?: CallOverrides): Promise<BigNumber>;

  pp(overrides?: CallOverrides): Promise<BigNumber>;

  smartAccountOwners(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toHex(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  validateUserOp(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    userOpHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    initForSmartAccount(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<string>;

    isValidSignature(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidSignatureForAddress(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      smartAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    nn(overrides?: CallOverrides): Promise<BigNumber>;

    pp(overrides?: CallOverrides): Promise<BigNumber>;

    smartAccountOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toHex(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    initForSmartAccount(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isValidSignature(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignatureForAddress(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      smartAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nn(overrides?: CallOverrides): Promise<BigNumber>;

    pp(overrides?: CallOverrides): Promise<BigNumber>;

    smartAccountOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toHex(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initForSmartAccount(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignatureForAddress(
      ethSignedDataHash: BytesLike,
      moduleSignature: BytesLike,
      smartAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    smartAccountOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toHex(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
